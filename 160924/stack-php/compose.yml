# {"networks": {"stack-php": {"driver": ..., "ipam": {
#    "config": [
#       {
#           "subnet": ..., 
#           "gateway": ...
#       },
#       {...}
#    ]
#}}}}


networks:
  stack-php:
    # fixer le nom du réseau
    name: stack-php
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/24
          gateway: 172.19.0.1
#       - ...

## on doit déclarer les volumes nommés !!!
volumes:
  db_data:
   # fixer le nom du volume
   name: db_data
  nfs-vol-nginx:
    name: nfs-vol-nginx
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.30,ro
      # le montage nfs est /mnt/nfs-dir/, Mais on peut se connecter dans un sous dossier !!
      device: :/mnt/nfs-dir/nginx-conf.d
  nfs-vol-php:
    name: nfs-vol-php
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.30,ro
      device: :/mnt/nfs-dir/app
  nfs-vol-db:
    name: nfs-vol-db
    driver: local
    driver_opts:
      type: nfs
      o: addr=192.168.1.30,ro
      device: :/mnt/nfs-dir/initdb.d

services:
  # nom du service => associe un ensemble des répliques (replicas) d'un conteneur donné
  # le service doit gérer les réplicas : nb de replicas, mise à jour de l'image ...
  web:
    # fixer le nom des conteneurs
    container_name: stack-php-nginx
    image: nginx:1.27.1-alpine-slim
    restart: unless-stopped
    networks:
      - stack-php
    ports:
      - 8080:80
    volumes:
      # - ./vhost.conf:/etc/nginx/conf.d/vhost.conf:ro
      # ici on fait un point de montage dossier vs dossier
      - nfs-vol-nginx:/etc/nginx/conf.d
    depends_on:
      - php
    profiles:
      # valeurs arbitraires
      - build
  
  php:
    container_name: stack-php-8.3-fpm
    image: bitnami/php-fpm:8.3-debian-12
    restart: unless-stopped
    networks:
      - stack-php
    volumes:
      # - ./index.php:/srv/index.php:ro
      - nfs-vol-php:/srv
    depends_on:
      - db
    profiles:
      # valeurs arbitraires
      - build

  db:
    container_name: stack-php-mariadb
    image: mariadb:11.5
    restart: unless-stopped
    networks:
      - stack-php
    env_file:
      - .env
    # environment:
    #   - MARIADB_USER=test
    volumes:
      # - ./mariadb-init.sql:/docker-entrypoint-initdb.d/mariadb-init.sql:ro
      - nfs-vol-db:/docker-entrypoint-initdb.d
      - db_data:/var/lib/mysql:Z
    profiles:
      # valeurs arbitraires
      - build
      # - hot-dump
  
  ## je vais raccrocher le volume db_data dans conteneur dans lequel je vais
  # 1. compresser la bdd /var/lib/mysql
  # 2. faire sortir la bdd compressée (avec un bind mount en local par ex.)
  ## desynchronisation du backup (action one-shot VS le build en arrière plan -d)
  # 1. utiliser des profiles (build, dump)
  # 2. build le µservice : docker compose --profile build up -d
  # 3. lancer le backup en one-shot: docker compose run --rm backup
  backup:
    image: alpine
    # pas de réseau
    network_mode: none
    volumes:
      # le volume existant est injecté dans /data, dossier qui est créé auto.
      - db_data:/data
      - ./dump:/dump
    command: tar -czvf /dump/dump.tar.gz /data
    profiles:
      - dump
    # command: ["tar", "-czvf", "/dump/dump.tar.gz", "/data"]
    # command:
    #   - tar
    #   - -czvf
    #   - /dump/dump.tar.gz
    #   - /data

## clumsy !!!!
  # hot-dump:
  #   image: alpine
  #   networks:
  #     - stack-php
  #   volumes_from:
  #     - db
  #   volumes:
  #     - ./dump:/dump
  #   command: tar -czvf /dump/hot-dump.tar.gz /var/lib/mysql
  #   depends_on:
  #     - db
  #   profiles:
  #     - hot-dump


    

