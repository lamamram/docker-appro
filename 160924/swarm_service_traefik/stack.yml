---
services:

  traefik:
    image: traefik:v3.0
    ports:
      - 80:80
      - 8083:8080
    deploy:
      endpoint_mode: vip
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 2
      labels:
        # considérer le service traefik dans l'infra traefik
        - traefik.enable=true
        # on utilise le réseau overlay traefik-public
        - traefik.docker.network=traefik-public
        # le port 80 pour lb le traefik (inutile ici car une seule replica)
        # - traefik.http.services.dashboard.loadbalancer.server.port=80
        - traefik.docker.lbswarm=true
    volumes:
      # traefik a besoin de découvrir les conteneurs (en utilisant dockerd)
      - /var/run/docker.sock:/var/run/docker.sock:ro  
      - ./log:/var/log  
    command:
      # activation du mode swarm pour traefik
      - --providers.swarm.endpoint=unix:///var/run/docker.sock
      # par défaut, traefik ne voit que les services qui sont labélisés (traefik.enable=true, secure)
      - --providers.swarm.exposedByDefault=false
      # on utilise par défaut ce réseau
      - --providers.swarm.network=traefik-public
      # traefik écoute le trafic sur le port 80 du cluster
      - --entrypoints.web.address=:80
      # pour le http
      - --entryPoints.web.forwardedHeaders.trustedIPs=127.0.0.1/32,192.168.1.30
      # voir le dashboard sur le port 8083
      - --api.dashboard=true 
      # idem en http
      - --api.insecure=true
      - "--api"
      - "--api.debug=true"
      - "--log=true"
      - "--log.level=DEBUG"
      - "--log.filepath=/var/log/traefik.log"
      - "--accesslog.filepath=/var/log/access.log"
    networks:
      - traefik-public

networks:
  traefik-public:
    name: traefik-public
    driver: overlay