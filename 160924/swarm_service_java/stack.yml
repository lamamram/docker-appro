---

services:
  tomcat:
    image: 192.168.1.30:443/stack-java-tomcat:0.1
    # image: stack-java-tomcat:1.0
    networks:
      stack_java:
        aliases:
          - stack-java-tomcat
      # traefik-public:
      #   aliases:
      #     - stack-java-tomcat
    labels:
      - author.username=mlamamra
      - author.email=mlamamra@dawan.fr
    # structure du service dans SWARM
    # &deploy-conf: référence en YAML
    deploy: &deploy-conf
      placement:
        constraints:
          - node.role != manager
      # la stratégie de découverte réseau pour trouver un ou plusieurs "tasks" du service
      endpoint_mode: vip # trouver une task
      # la stratégie de dissiménation des tasks  
      mode: replicated # dissiminer un nb de replicas où on peut
      replicas: 2
      # stratégie de redémmarage mais du service (pas des tasks)
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 2
      # gestion des rolling updates => mise à jour des conditions / critères de l'état des servies
      update_config:
        # nb de threads (parallélisme): on peut gérer les maj de chaque task  en //
        parallelism: 2
        

  
  httpd:
    # WARNING: pas de BUILD avec SWARM !
    image: 192.168.1.30:443/stack-java-httpd:0.1
    # image: stack-java-httpd:1.0
    ## avec le reverse proxy traefik on est plus obligé d'utiliser la publication directe des aoaches
    ## car traefik trouve une task du service httpd en 80 en interne sur le réseau traefik-public sur le 80 
    ports:
      - 8081:80
    # 1. dans un dialecte YAML, on peut utiliser le polymorphisme
    # => le type de la valeur d'une clé peut être variable
    # ici networks peut être une liste ou un objet contenant des configs plus complexes
    networks: 
      stack_java:
        # on peut spécifier des aliases pour différencier le nom du service
        aliases:
          - stack-java-httpd
      # traefik-public:
      #   aliases:
      #     - stack-java-httpd
    depends_on:
      - tomcat
    labels:
      - author.username=mlamamra
      - author.email=mlamamra@dawan.fr
    # *deploy-conf : alias YAML, accroche le contenu de &deploy-conf
    # << : *deploy-conf: anchor YAML, accroche et redéfinit //
    deploy: 
      <<: *deploy-conf
      # labels:
      #   # service observable par traefik
      #   - traefik.enable=true
      #   # spécifier le réseau pour la découverte
      #   - traefik.docker.network=traefik-public
      #   # pour le trafic lié à l'entrypoint (web définit dans le sercive traefik -> poirt 80 sur le cluster)
      #   - traefik.http.routers.httpd.entrypoints=web
      #   # règle d'url pour trouver le httpd
      #   - traefik.http.routers.httpd.rule=Host(`formation.lan`)
      #   # on va lb sur le réseau traefik-public -> http://formation.lan:8083/dashboard/#/http/services/httpd%40swarm
      #   - traefik.http.services.httpd.loadbalancer.server.port=80

    
        

networks:
  stack_java:
    name: stack_java
    driver: overlay
  # registry:
  #   external: true
  # traefik-public:
  #   external: true
    
    